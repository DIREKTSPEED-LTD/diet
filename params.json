{"name":"Diet","tagline":"A minimal plugin based http framework for node.js . Diet will save you development time and make your apps much more efficient.","body":"**diet**\r\n===\r\n\r\nA minimal plugin based http framework for node.js . Diet will save you development time and make your apps much more efficient.\r\n--\r\n\r\n#### **Why another framework?**\r\n - Diet is the fastest server in the universe. Diet can speed up your response delivery by 99% with it's unique caching mechanism. No matter how complex your server logic is, diet makes a compact binary version of it and you can update your caches whenever a change has happened.\r\n - Diet has a very pleasing human syntax unlike any other framework.\r\n - Diet is easier to learn and understand than other frameworks.\r\n - Diet is packed with default plugins that solve 90% of use cases in all your apps. For example: \r\n\t - email *(based on nodemailer)*\r\n\t - mysql *(based on mysql armed with no-sql like syntax)*\r\n\t - upload *(based on formidable)*\r\n\t - demand - form validation\r\n\t - static - file handler\r\n\t - ect - html template engine\r\n\r\n#### **Install**\r\n```\r\nnpm install diet\r\n```\r\n\r\n####**Hello World! in diet**\r\n```js\r\n// SETUP\r\n$ = require('diet');\r\n$.domain = 'localhost';\r\n\r\n// ROUTE GET /\r\n$('GET /', function(){\r\n    end('hello world');\r\n});\r\n```\r\n##### **Load MySQL module as a plugin**\r\n```js\r\n\r\n// SETUP\r\n$ = require('diet');\r\n$.domain = 'localhost'; \r\n\r\n// PLUGIN diet-mysql module\r\nvar db = $.plugin('diet-mysql')({\r\n    host: 'localhost',\r\n    user: 'root',\r\n    password: '',\r\n    database: 'hello'\r\n});\r\n\r\n// PLUGIN the ECT template engine module\r\n$.plugin('diet-ect', { open: '{{', close: '}}' }) \r\n\r\n// ROUTE GET /\r\n$('GET /', db, function(){ // <-- no arguments needed!\r\n    // plugins and local functions are being called without\r\n    // having to bother with arguments\r\n    \r\n    // call db() and append results to the data object\r\n    db('SELECT * FROM users', data); \r\n    \r\n    // the end() function sends back a response\r\n    // the diet-ect plugin allows to send back\r\n    // data-driven dynamic strings\r\n    end('hello world {{-this.data[0].name}}');\r\n});\r\n```\r\n\r\n##### **Respond with HTML**\r\n```js\r\n// you will need a static file handler plugin. \r\n// `diet-static` is a plugin for the `send` module\r\n$.plugin('diet-static');\r\n\r\n// if you need dynamic html use then plugin a template engine \r\n// `diet-ect` is a plugin for the `ECT` template engine\r\n$.plugin('diet-ect', { open: '{{', close: '}}' });\r\n\r\n$('GET /', function(){\r\n    html(); // if left empty returns the contents of /static/html/index.html\r\n});\r\n```\r\n\r\n##### **Respond with JSON**\r\n\r\n```js\r\n$('GET /something', function(){\r\n    json({ hello: 'world' }); // if left empty it's {}\r\n});\r\n```\r\n\r\n##### **Respond with success**\r\n```js\r\n$('GET /something', function(){\r\n    success(); // responds with { success: true } \r\n});\r\n```\r\n\r\n##### **Respond with error**\r\n```js\r\n$('GET /something', function(){\r\n    errors.email = 'Email is already in use.';\r\n    error(); // responds with { success: false, errors: [errors Object] } \r\n});\r\n```\r\n\r\n#### **Route Variables for GET**\r\n```js\r\n$('GET /something', function(){\r\n    url             // /something ==> { href: '/something', hostname: 'localhost', pathname: 'something' }\r\n    query           // ?a=b ==> { a: 'b' }\r\n    params          // /something:id ==> { id: 'x100' }\r\n    end             // default respond function\r\n    errors          // errors object\r\n    json            // json respond function\r\n    success         // json success respond function\r\n    error           // json error response function\r\n});\r\n```\r\n\r\n#### **Run**\r\n```\r\nnode index.js\r\n```\r\n\r\n#### **A regular folder structure**\r\n```\r\n/node_modules\r\n/plugins\r\n/static\r\n    /html\r\n    /styles\r\n    /scripts\r\n    /images\r\n/routes\r\nindex.js\r\n```\r\n\r\n#### **Create a Plugin for Router**\r\n\r\nin **/plugins/my-plugin.js**\r\n```js\r\n// my-plugin.js\r\nvar $ = require('diet');\r\nmodule.exports = function(options){\r\n    // this function is called from within the router\r\n    return function(signal, plugins){\r\n        return 'Hello ['+signal.ip+'] from myPlugin!';\r\n    }\r\n}\r\n```\r\n\r\nin **/index.js**\r\n```js \r\n$ = require('diet');\r\nvar myPlugin = $.plugin('my-plugin.js');\r\n    \r\n$('GET /hello', myPlugin, function(){\r\n    var message = myPlugin();\r\n    end(message);\r\n});\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}