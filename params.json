{"name":"Diet","tagline":"Fast, plugin based, easy to use HTTP(s) framework for node]","body":"[![Diet.js](http://imgur.com/3LBDJRB.png)](https://dietjs.com/) \r\n\r\nFast, plugin based, easy to use HTTP(s) framework for [node][1]\r\n\r\n[![Build Status](http://img.shields.io/travis/adamhalasz/diet.svg?style=flat)](https://travis-ci.org/adamhalasz/diet) [![NPM](http://img.shields.io/npm/v/diet.svg?style=flat)](https://www.npmjs.org/package/diet) [![Downloads](http://img.shields.io/npm/dm/diet.svg?style=flat)](https://www.npmjs.org/package/diet) [![Coveralls](http://img.shields.io/coveralls/adamhalasz/diet.svg?style=flat)](https://coveralls.io/r/adamhalasz/diet)\r\n\r\n\r\n```js\r\nvar server = require('diet')\r\n\r\nvar app = new server()\r\napp.domain('http://localhost:8000/')\r\napp.start()\r\n\r\napp.get('/', function($){\r\n\t$.end('Hello World!')\r\n})\r\n\r\n// curl http://localhost/ → Hello World!\r\n```\r\n\r\n```js\r\n// 1 line http server\r\nrequire('diet').server().start().get('/', function($){ $.end('yo!') })\r\n```\r\n\r\n\r\n## **Why another framework?**\r\n\r\n#### **A framework exclusively for HTTP and HTTPS**\r\nDiet is solely focusing on being a framework for HTTP(s) to serve Requests with Responses. As such diet has `Plugins` a special module framework designed to reduce the complexity of building application infrastructure and logic by inter-connecting modules with `Plugins` trough the `Router`. **This is all what Diet does** regarding it's functionality.\r\n\r\n#### **Standardized but still Expressive**\r\nWhat is human readable and if it worths is controversial amongst many people. We are drawing a fine line between keeping the method names all written out and try to set the basic namings in stone while making it possible to organize and call all the methods in many different ways.\r\n\r\n#### **Easier to Learn**\r\nDiet is a project aiming to create the most powerful node.js web application framework with the smallest learning curve.  A wide range of Examples and Tutorials are currently in progress.\r\n\r\n## **Features**\r\n#### **Plugins** \r\nDiet has a very powerful modular middleware structure for it's `Router`. Middlewares in diet allow unlimited series of modules to work together by manipulating and passing data towards the `plugin chain`. \r\n\r\n**An example GET Route** \r\nassuming `db`, `session` and `protected` is already defined:\r\n```js\r\napp.get('/settings', db, session, protected, function($){\r\n    $.data.page = 'settings'\r\n    $.html()\r\n})\r\n```\r\n- `the first argument` of a route is the **Path**. Everything after the Path is *plugin middleware* that forms a *plugin chain*\r\n\r\n- `db` instruct this route to create a database connection \r\n- `session` grabs the account from the database with the session cookie\r\n- `protected` makes sure the user is logged in. if not redirects the user to `GET /accounts/login`\r\n- `the last argument` terminates the request by sending back the *settings* html page.\r\n\r\n#### **URL Routing**\r\nSmart & easy to use sinatra like routing.\r\n```js \r\napp.get('/page/about' ...)\r\napp.get('/users/:id/'...)\r\napp.post('/upload'...)\r\n```\r\n\r\n#### **Multiple Domain Support**\r\nDiet can host multiple websites/domains from the same node.js server.\r\n\r\n#### **Helpers**\r\nIncludes **[Sugar.js][3]** to extend native objects with helpful methods.  \r\n\r\n## **Install**\r\n```\r\nnpm install diet \r\n```\r\n\r\n# **Plugin Directory**\r\nWe have a list of plugins categorized by their purpose in the wiki: \r\nhttps://github.com/adamhalasz/diet/wiki/Plugins\r\n\r\n### **Officially Supported Diet Plugins**\r\n\r\n| Plugin | Category | Github Docs | Install |\r\n| :------------ | :------------ | :------------ | :------------ |\r\n| **diet-ect**       | HTML Templates       |       http://git.io/q4rxng | npm install diet-ect     \t|\r\n| **diet-static**    | Static Files         |       http://git.io/TMliZw | npm install diet-static\t|\r\n| **diet-mysql**     | Database             |       http://git.io/qDgntw | npm install diet-mysql\t|\r\n| **diet-mongo**     | Database             |       http://git.io/7nrOOA | npm install diet-mongo\t|\r\n| **diet-mongoose**  | Database             |       http://git.io/XG95jA | npm install diet-mongoose\t|\r\n| **diet-mail**      | Email                |       http://git.io/_Ymgkg | npm install diet-mail \t|\r\n| **diet-cookies**   | Cookies              |       http://git.io/0FIk4A | npm install diet-cookies \t|\r\n| **diet-auth**   | Authentication              |       http://git.io/HDwgJg | npm install diet-auth \t|\r\n\r\n\r\n\r\n## **Hello HTML!**\r\n![Complete Hello World example with HTML Template][4]\r\n\r\nSetup a new project in **/project/index.js**\r\n```js\r\n// Require Diet\r\nvar server = require('diet')\r\n\r\n// Create an App\r\nvar app = new server()\r\n\r\n// Set Domain\r\napp.domain('http://localhost:8000/')\r\n\r\n// Load the HTML Template Engine\r\napp.plugin('diet-ect', { alias: 'html' })\t\r\n\r\n// Start the App\r\napp.start()\r\n\r\n// Listen on GET /\r\napp.get('/', function($){\r\n\t$.data.page = 'home'\r\n\t$.html()\r\n})\r\n```\r\nAnd write an HTML view in **/project/static/index.html**\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<title>Hello World</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<h1>Hello World on the <u>{{-this.page}}</u> page!</h1>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n# **Signal ($)**\r\nWith the default node.js you would have the `request` and `response` arguments in your callback when using `http.createServer()`. \r\n\r\nDiet combines these two objects into a single one then adds and fixes some commonly used methods in a more meaningful way for everyday use.\r\n\r\nThe signal (`$`) of each route can also be extended with `Plugins`. Plugins work together seamlessly in diet because the signal (`$`) object allows to pass data between plugins while keeping plugin namespaces in the signal (`$`) object. When multiple plugins are assigned to a route they form a `plugin chain`. The plugin chain is the key to write much less code and still achieve complex tasks. \r\n\r\nThe handy signal object can be accessed in all the  `Routes` and `Plugins` as the first argument as you can see on the examples.\r\n\r\n\r\n\r\n## **Example**\r\n```js\r\nvar server = require('diet')\r\n\r\napp = new server()\r\napp.domain('http://localhost:8000/')\r\napp.plugin('yo')\r\napp.start()   \r\n\r\napp.get('/ ', yo, function($){  // <-- `$` the dollar sign is the signal object\r\n    $.end($.yo.sender + ' says ' + $.yo.message) // -> John says Yo!\r\n})\r\n```\r\n\r\n## **Signal Methods**\r\nThis is a list of methods that you can access and use\r\n\r\n| Method | Type | Description |\r\n| :------------ | :------------ | :------------  \r\n| **$.url**     | Object        | JSON Parsed `request.url`\r\n| **$.query**   | Object        | JSON Parsed querystring\r\n| **$.params**  | Object        | URL params from dynamic page routes like `/user/:id`\r\n| **$.data**    | Object       | used in `html templates` and `$.json()` responses\r\n| **$.body**    | Object        | JSON Parsed POST body data\r\n| **$.headers** | Object        | An object of all the headers.\r\n| **$.header(get, set)**     | Function        | Get or Set Headers. The second argument is for SET, if left empty it's GET.\r\n| **$.redirect(path, statusCode)**     | Function        | Redirect the request to a different path. `path` is requried, `statusCode` is optional.\r\n| **$.end(message)**     | Function        | End the response with an optional `message` \r\n| **$.chain()**     | Function        | Create a plugin chain manually on the fly inside a route \r\n| **$.method**     | String        | The method of the request it's eiher GET or POST\r\n| **$.multipart**     | Boolean        | Check if a POST request's enctype is is multipart or not. The value is a boolean: `true` or `false`. \r\n| **$.noRoute**     | Boolean        | Check if a request has a matching registered route from `app.get` or `app.post`. The value is a boolean: `true` or `false`.\r\n\r\n#### **$.url** - *object*\r\nJSON Parsed `request.url`\r\n```js\r\n$.url = { \r\n    protocol: 'http:',\r\n    slashes: true,\r\n    host: 'example.com',\r\n    hostname: 'example.com',\r\n    href: 'http://example.com/',\r\n    pathname: '/',\r\n    path: '/' }\r\n```\r\n\r\n#### **$.query** - *object*\r\nJSON Parsed querystring\r\n```js\r\n// http://example.com/?query=value\r\n$.query = { query: 'value' }\r\n```\r\n\r\n#### **$.params** - *object*\r\nURL params from dynamic page routes like `/user/:id`\r\n```js\r\n// GET http://example.com/user/eddie\r\n$.params = { id: 'eddie' }\r\n```\r\n\r\n#### **$.data** - *object*\r\nan object used in html templates and `$.json()` responses\r\n```js\r\n$.data = {}\r\n```\r\n\r\n#### **$.body** - *object*\r\nJSON Parsed POST body data\r\n```js\r\n// POST http://example.com/?message=hello\r\n$.body = { message: 'hello' }\r\n```\r\n\r\n#### **$.headers** - *object*\r\nAn object of all headers.\r\n```js\r\n$.headers = { host: 'example.com',\r\n  connection: 'keep-alive',\r\n  accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\r\n  'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36',\r\n  'accept-encoding': 'gzip,deflate,sdch',\r\n  'accept-language': 'en-US,en;q=0.8,da;q=0.6,hu;q=0.4',\r\n  cookie: 'id=999' }\r\n```\r\n\r\n#### **$.header(get, set)** - *function*\r\nGet or Set Headers. The second argument is for SET, if left empty it's GET. \r\n```js\r\n$.header('cookie')                    // GET `cookie` -> 'id=999'\r\n$.header('content-type', 'text/html') // SET `content-type` to `text/html`\r\n```\r\n\r\n#### **$.redirect(path, statusCode)** - *function*\r\nRedirect the request to a different path. `path` is requried, `statusCode` is optional.\r\n\r\n**Redirect to a Path**\r\n```js\r\n$.redirect('/to/some/path')        // internal redirect \r\n$.redirect('http://google.com/')   // external redirect\r\n```\r\n**Redirect Home**\r\n```js\r\n// redirect to home\r\n$.redirect('home')\r\n```\r\n```js\r\n// is the same as\r\n$.redirect('/')\r\n```\r\n**Redirect Back**\r\n```js\r\n// redirect back\r\n$.redirect('back')\r\n```\r\n```js\r\n// is the same as\r\n$.redirect($.request.headers.referer)\r\n```\r\n\r\n#### **$.method** - *string*\r\nA string that you can use to check the method of the request. It's either GET or POST.\r\n```js\r\n// GET http://example.com/\r\n$.method // -> GET\r\n\r\n// POST http://example.com/publish\r\n$.method // -> POST\r\n```\r\n\r\n#### **$.end(message)** - *function*\r\nA function that ends the response and send back data to the requesting device.\r\n```js\r\napp.get('/', function($){\r\n    $.end('end response')\r\n})\r\n```\r\n\r\n#### **$.chain()** - *function*\r\nCreates a plugin chain manually on the fly inside a route. This is useuful when you would like a create shortcut plugin that runs several other ones.\r\n\r\n##### **Methods**\r\n| Method | Description |\r\n| :------------ | :------------  \r\n| **chain.plugin(pluginName, pluginPath)**         | Add a plugin to the chain\r\n| **chain.load(readyCallback)**         | Load the plugins into the chain in one-by-one after each other. readyCallback runs when all the plugins are ready. \r\n\r\n```js\r\napp.get('/', function($){\r\n\tvar chain = new $.chain()\r\n\tchain.plugin('db', app.db)\r\n\tchain.plugin('session', app.session)\r\n\tchain.plugin('notifications', app.alerts)\r\n\tchain.load(function(){\r\n\t\t$.end())\r\n\t})\r\n})\r\n```\r\n\r\n#### **$.multipart** - *boolean*\r\nCheck if a POST request's enctype is is multipart or not. The value is a boolean: `true` or `false`.\r\n\r\n#### **$.noRoute** - *boolean*\r\nCheck if a request has a matching registered route from `app.get` or `app.post`. The value is a boolean: `true` or `false`.\r\n\r\n\r\n\r\n# **Routing**\r\nRouting is the method that we describe when we pre-register a response to an anticipated incoming request from a client like a web browser, mobile or desktop app. In other words Routing is the way to prepare your app for the battle.\r\n\r\nIn this section I'm going to discuss the 2 supported `http methods`,  `get` and `post` and show examples of `simple routing` and `dynamic` routing using the `path` argument.\r\n\r\n## **Simple Routing**\r\nDiet supports the `get` and `post`  routing methods.\r\n```js\r\napp.get('/', ...)            \r\n// curl http://example.com/\r\n\r\napp.get('/about', ...)       \r\n// curl  http://example.com/about\r\n\r\napp.get('/article/:id', ...)    \r\n// curl http://example.com/articles/89934\r\n\r\napp.post('/profile', ...)     \r\n// curl -X POST http://example.com/profile\r\n```\r\n\r\n## **Dynamic Routing**\r\nDiet supports Sinatra like dynamic routing. Everything in the route path after `:` is passed to `$.params` with the name you provided.\r\n\r\n### **Get user by id**\r\nAs you can see `:id` becomes `$.params.id` which holds the value from the URL.\r\n```js\r\napp.get('/user/:id', function($){\r\n    $.end('User is ' + $.params.id) \r\n})\r\n// http://example.com/user/adam\r\n// -> User is adam\r\n```\r\n\r\n### **Get calendar by date**\r\nYou can have **multiple params** in a route, each is assigned to the `$.params` object with the parameter name you provide.\r\n```js\r\n// Calendar Date\r\napp.get('/calendar/:month/:day/:year', function($){\r\n    var message = $.params.month ',' + $.params.day + ',' + $.params.year\r\n    $.end(message)\r\n})\r\n// http://example.com/calendar/05/10/2014\r\n// -> 05,10,2014\r\n```\r\n\r\n### **Get a list with a view option**\r\nIf you add `?` after the param such as `:view?` it becomes optional.\r\n```js\r\napp.get('/list/:view?', function($){\r\n    if($.params.view == 'gallery'){\r\n        $.end('Display #Gallery View') \r\n    } else {\r\n        $.end('Display #List View')\r\n    }\r\n    \r\n})\r\n// http://example.com/list\r\n// -> Display #List View\r\n\r\n// http://example.com/list/gallery\r\n// -> Display #Gallery View\r\n```\r\n\r\n## **When to use GET or POST?**\r\n\r\n#### **The GET Method**\r\nHTTP GET promotes URI addressability so, designers should adopt it for safe operations such as simple queries. \r\n\r\n- GET requests can be cached\r\n- GET requests remain in the browser history\r\n- GET requests can be bookmarked\r\n- GET requests should never be used when dealing with sensitive data\r\n- GET requests have length restrictions\r\n- GET requests should be used only to retrieve data\r\n\r\n#### **The POST Method**\r\nPOST is appropriate for other types of applications where a user request has the potential to change the state of the resource (or of related resources).\r\n\r\n- POST requests are never cached\r\n- POST requests do not remain in the browser history\r\n- POST requests cannot be bookmarked\r\n- POST requests have no restrictions on data length\r\n\r\nCheck out [W3C](http://www.w3.org/2001/tag/doc/whenToUseGet.html) for more details:\r\n\r\n# **Domains**\r\nIn some cases you might want to serve multiple domains with the same node.js application. Diet handles this beautifully. \r\n\r\n\r\n## **Simple Single Domain:**\r\n```js\r\nvar app = new server()\r\napp.domain('http://yourDomain.com/') // <-- ! full url required\r\napp.start()\r\n```\r\n## **Multiple Domains on the same and different Ports:**\r\n```js\r\n// Diet\r\nvar server = require('diet')\r\n\r\n// Main Domain\r\nvar app = new server()\r\napp.domain('http://example.com/')\r\napp.start()\r\napp.get('/', function($){\r\n\t$.end('hello world ')\r\n})\r\n\r\n// Sub Domain\r\nvar sub = new server()\r\nsub.domain('http://subdomain.example.com/')\r\nsub.start()\r\nsub.get('/', function($){\r\n\t$.end('hello world at sub domain!')\r\n})\r\n\r\n// Other Domain\r\nvar other = new server()\r\nother.domain('http://other.com/')\r\nother.start()\r\nother.get('/', function($){\r\n\t$.end('hello world at other domain')\r\n})\r\n```\r\n\r\n## **Domain Methods**\r\n\r\n| Method | Description |\r\n| :------------ | :------------  \r\n| **app.plugin('plugin_name', config)**         | includes a plugin, config is an optional object\r\n| **app.start(callback)**         | Starts the application by loading plugins and launchung the HTTP(S) Server. callback is optional\r\n| **app.domain(url)**         | Specifiy the domain your server will listen to. `url` can be a URL string or Node.js URL Object\r\n| **app.get(path, plugins...)**         | Register a GET Route\r\n| **app.post(path, plugins...)**         | Register a POST Route\r\n| **app.path**         | The system path to your application. It is `process.cwd()` by default\r\n\r\n\r\n**Example for app.domain()**\r\n```js\r\n// Set Domain\r\napp.domain(url) \r\n\r\n// `url` should be a full URL containing the protocol http or https \r\n// and the / at the end like:\r\n// \"http://example.com/\"\r\n\r\n// `url` can also be a Node.js URL Object such as\r\n{\r\n    hostname: \"nodejs.org\"\r\n    origin: \"http://nodejs.org\"\r\n    port: 80,\r\n    protocol: \"http:\"\r\n}\r\n```\r\n\r\n# **Writing Diet Plugins**\r\nWriting diet plugins are almost identical to writing node.js modules except plugins have a different require method and are directly connected to Routes.\r\n\r\nTo effectively demonstrate this we'll create a very simple bank application. The bank will have a `name` and a `vault`. We'll fill the vault with `6 coins` when the application starts.\r\n\r\n\r\n#### **1) Lesson 1: Require Plugins:**\r\nYou can register plugins with `app.plugin()`. Plugins are only initialized after `app.start()` was executed. \r\n```js\r\n// cd ~/yourProject\r\nvar server = require('diet')\r\nvar app = new server()\r\napp.domain('http://localhost:8000/')\r\n\r\n// require the bank plugin from the node_modules folder\r\napp.plugin('bank', { name: 'John Doe', vault: 6 })\r\n\r\n// start the application\r\napp.start()\r\n```\r\n\r\n#### **2) Lesson 2: Accessing custom options from the source code of the plugin:**\r\n```js\r\n// cd ~/yourProject/node_modules/bank\r\nexports.onload = function(app, options){\r\n    // let's see how much coins the bank has\r\n    console.log('   # The \"'+ options.name +' Bank\"'\r\n\t\t          + ' has ['+ options.vault +'] coins.') \r\n    \r\n    // prints -> The \"John Doe Bank\" has [6] coins.\r\n    // then we need to return the plugin\r\n    app.return() \r\n}\r\n```\r\n\r\n#### **3) Lesson 3: Create a Global Plugin for all routes:**\r\nEveryone who visits the app will be able to see and change the value of the vault with the `deposit` and `withdraw` methods.\r\n\r\nLet's extend our bank plugin with a `global` function inside `exports.onload`:\r\n```js\r\n// cd ~/yourProject/node_modules/bank\r\n// Note: `app` and `options` are stored in memory\r\n\r\nexports.onload = function(app, options){\t\r\n\tthis.global = function($){\r\n\t\t// this creates a new instance \r\n\t\t// of the $.bank in everyone visitors route\r\n\t\tthis.name = options.name\r\n\t\tthis.vault = options.vault\r\n\t\tthis.deposit = function(amount){\r\n\t\t\toptions.vault += parseInt(amount)\r\n\t\t}\r\n\t\tthis.withdraw = function(amount){\r\n\t\t\toptions.vault -= parseInt(amount)\r\n\t\t}\r\n\t\t$.return(this)\r\n\t}\r\n\tapp.return(this)\r\n}\r\n```\r\nNow that we created the plugin we can access the `$.bank` in all Routes of the `app`. Let's extend our *index.js* file with some `Routes` so visitors can `see` the vault and `withdraw`/ `deposit` coins.\r\n```js\r\n// cd ~/yourProject/index.js\r\nvar server = require('diet')\r\nvar app = new server()\r\n\r\n// setup domain\r\napp.domain('http://localhost:8000/')\r\n\r\n// use the bank plugin\r\napp.plugin('bank', { name: 'John Doe', vault: 6 })\r\n\r\n// start the application\r\napp.start()\r\n\r\n// instruct our app to\r\n// print 'The \"Y Bank\" owns X coins'\r\n// upon visiting /\r\napp.get('/', function($){\r\n\t$.end('The \"'+ $.bank.name +' Bank\" '\r\n\t    + 'has ['+ $.bank.vault +'] coins.')\r\n})\r\n\r\n// instruct our app to\r\n// deposit X amount coins into the vault \r\n// upon visiting /banks/deposit/10 \r\napp.get('/bank/deposit/:amount', function($){\r\n\t$.bank.deposit($.params.amount)\r\n\t$.redirect('home')\r\n})\r\n\r\n// instruct our app to\r\n// withdraw X amount coins from the vault\r\n// upon visiting /banks/withdraw/5  \r\napp.get('/bank/withdraw/:amount', function($){\r\n\t$.bank.withdraw($.params.amount)\r\n\t$.redirect('home')\r\n})\r\n```\r\nAnd we're done! Navigate to your project's folder in your terminal and run the application:\r\n```bash\r\n# bash screen 1\r\ncd ~/yourProject/\r\nnode index.js\r\n```\r\n\r\nNow open another terminal screen and let's test the app:\r\n```bash\r\n# bash screen 2\r\ncurl \"http://localhost:8000/\"\r\n// The \"John Doe Bank\" owns [6] coins.\r\n\r\ncurl -L \"http://localhost:8000/bank/deposit/10\"\r\n// The \"John Doe Bank\" owns [16] coins.\r\n\r\ncurl -L \"http://localhost:8000/bank/widthraw/9\"\r\n// The \"John Doe Bank\" owns [7] coins.\r\n\r\n```\r\nSweet! I admit it's a pretty retarded bank app, but hey I hope at least you've got some of the ideas behind the `global plugins`.\r\n\r\n#### **3) Lesson 4: Create a Local Plugin:**\r\n\r\n....UNDER CONSTRUCTION....\r\n\r\n#### **Plugin Types**\r\n\r\nPlugins may be all or at least one of these types:\r\n\r\n- **Onload** module plugin\r\n- **Global** module plugin\r\n- **Custom** module plugin\r\n- **Local** module plugin\r\n- **Local ** stand alon function plugin\r\n\r\n# **Todos**\r\nUpcoming updates and features:\r\nhttps://github.com/adamhalasz/diet/wiki/Todos\r\n\r\n# **License**\r\n(The MIT License)\r\n\r\nCopyright (c) 2014 Halász Ádám <mail@adamhalasz.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n\r\n  [1]: http://nodejs.org/\r\n  [2]: http://i.imgur.com/rTAMJF0.png\r\n  [3]: http://sugarjs.com/\r\n  [4]: http://i.imgur.com/M8I3Dp0.png","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}