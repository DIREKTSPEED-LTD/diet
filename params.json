{"name":"Diet","tagline":"A minimal plugin based http framework for node.js . Diet will save you development time and make your apps much more efficient.","body":"# **Diet**\r\nDiet is a beautiful, minimalistic, extensible HTTP framework for node.js. When you're code is on diet, your apps become skinny, fast, organized & healthy!\r\n\r\n## **What does diet do?**\r\n\r\n - Diet provides **Plugins** that extend your apps functionality.\r\n - Diet provides **HTTP Routing**.\r\n - Diet provides **HTTP Domain Controlling**.\r\n - Diet provides the **`$` signal argument** that is a combination of the request and response objects. The signal argument holds key informations about the request, and some default functions, like `$.end()`, `$.url`, `$.query`, `$.body`, `$.headers`\r\n - Diet ships with some powerful basic plugins: `sessions`,  `demands`, `diet-mysql`, `diet-accounts`, `diet-cookies`, `diet-mail`\r\n\r\n\r\n## **Hello World!**\r\n```js\r\n$ = require('diet');\r\n$.start('http://localhost:8000');\r\n$('GET /', function($){ $.end('Hello World!'); })\r\n```\r\nin just 3 lines.\r\n\r\n## **Install**\r\n`npm install diet `\r\n\r\n# **Diet Plugins**\r\nPlugins are middlewares that act as a bridge between modules and help write much more efficient Object Oriented code. Plugins are essentially regular node.js functions or modules that follow a standard based on diet's `$` *(signal)* argument.\r\n\r\n#### **The 3 Types of Plugins**\r\nPlugins may be all or at least one of these types:\r\n\r\n- **Onload** plugin\r\n- **Global** plugin\r\n- **Local** plugin\r\n\t\r\n## **Onload Plugins**\r\nOnload plugins *run code right away after the plugin was initialized*. The use cases of onload plugins are very handy when you want to alter the signal property globally, preprocess data, update caches, schedule/execute background tasks etc.\r\n\r\n**An Example Plugin:**\r\n```js  \r\n// project/example.js\r\nmodule.exports.onload = function($){ \r\n    $.message = 'hello world!';\r\n    $.return();\r\n}\r\n```\r\n```js\r\n// project/index.js\r\n$ = require('diet');    \r\n$.start('http://localhost:8000');\r\n$.plugin('example.js'); // pass a function as the second\r\n                        // argument for an async callback\r\nconsole.log($.message); // -> hello world!\r\n```\r\n## **Global Plugins**\r\nGlobal plugins run on all incoming HTTP requests/routes. Global plugins can be handy when you need certain functionalities in all or a specific type of routes for example sessions & static file handling.\r\n\r\n**Example Plugin:**\r\n```js\r\n// project/example.js\r\nvar path = require('path');\r\nmodule.exports.global = function($){\r\n    this.extension = path.extname($.url.href);\r\n    $.return(this);\r\n}\r\n```\r\n```js\r\n// project/index.js\r\n$ = require('diet');\r\n$.start('http://localhost:8000');\r\n$.plugin('example.js');\r\n\r\n$('get /', function($){\r\n    $.end('Extension is ' + $.example.extension);\r\n});\r\n\r\n$('get /image.jpg', function($){\r\n    $.end('Extension is ' + $.example.extension);\r\n});\r\n```\r\n```\r\n// terminal\r\ncurl 'http://localhost:8000/'\r\n-> Extension is undefined\r\n\r\ncurl 'http://localhost:8000/image.jpg'\r\n-> Extension is .jpg\r\n```\r\n\r\n## **Local Plugins**\r\nLocal plugins run on specified routes. Local plugins are handy for organizing your code for optimization, so each plugin is required only when it is actually needed.\r\n\r\n**Example Local Plugin as a Module:**\r\n```js\r\n// project/example.js\r\nmodule.exports.local = function($){\r\n    this.name = 'Adam';\r\n    this.age = 20;\r\n    $.return(this);\r\n}\r\n```\r\n```js\r\n// project/index.js\r\n$ = require('diet');\r\n$.start('http://localhost:8000');\r\nvar person = $.plugin('example.js');\r\n\r\n$('get /', person, function($){\r\n    $.end('Hi I am ' + $.person.name + ', '  + $.person.age + ' old.');\r\n    // -> Hi I am Adam, 20 years old.\r\n});\r\n```\r\n\r\n**Example Local Plugin as a Function:**\r\nLocal plugins can also be created as functions\r\n```js\r\n// project/index.js\r\n$ = require('diet');\r\n$.http('localhost', 8000);\r\n\r\nfunction person($){\r\n    this.name = 'Adam';\r\n    this.age = 20;\r\n    $.return(this);\r\n}\r\n\r\n$('GET /', person, function($){\r\n    $.end('Hi I am, ' + $.person.name + ', '  + $.person.age + ' old');\r\n    // -> Hi I am Adam, 20 years old.\r\n});\r\n```\r\n\r\n# **$ Signal**\r\nThe signal is diet's namespace in node. There is a global signal variable used in the global context, and there is a signal argument which is used in the plugin's local context.\r\n\r\n## **Example**\r\n```js\r\n    $ = require('diet');        // <-- global signal\r\n    $.start('http://localhost:8000');  \r\n    $.plugin('plugin_name');    // <-- using global signal in global scope\r\n    \r\n    $('get / ', function($){  // <-- signal argument\r\n        $.end('hello world'); // <-- using local signal in local scope\r\n    });\r\n```\r\n\r\n## **Global Signal Attributes**\r\n```js\r\n    // include a plugin\r\n    $.plugin('plugin_name', optionl_async_function);     \r\n    \r\n    // enable debug mode. `false` by default.\r\n    $.debug = true; \r\n    \r\n    // path of your application. `process.cwd()` by default\r\n    $.path;\r\n    \r\n    // HTTP Server\r\n    $.start(domain, callback);\r\n    \r\n    // examples:\r\n    // $.start('http://localhost:8000');\r\n    // $.start('http://localhost:8000', readyCallback);\r\n    // readyCallback is optional\r\n    \r\n    // HTTP Server\r\n    $.start(domain, certificates, callback);\r\n    \r\n    // examples:\r\n    // $.start('https://localhost:8000', { ... }, readyCallback);\r\n    // readyCallback is optional\r\n    \r\n    // route http(s) requests\r\n    $('get /path', pluginA, pluginB .., function($){\r\n        ...\r\n    });\r\n    // first argument is the method and path. the method can be `get` or `post` followed by a space and the path.\r\n    // 'get /page'\r\n    // 'post /form'\r\n    // the last argument is the ending function\r\n    // any argument between the first and last is a local plugin\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}